apiVersion: apps/v1
kind: Deployment
metadata:
  name: deployment-staticnginx
  labels:
    app: staticnginx
    {{- toYaml .Values.labels | nindent 4 }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: app-staticnginx
  replicas: 3
  strategy:
    rollingUpdate:
      maxSurge: 25%
      maxUnavailable: 25%
    type: RollingUpdate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: app-staticnginx
    spec:
      automountServiceAccountToken: false
      containers:
        - image: public.ecr.aws/nginx/nginx:latest
          imagePullPolicy: Always
          name: app-staticnginx
          ports:
            - containerPort: 80
              protocol: TCP
          resources:
            limits:
              cpu: 500m
              memory: 512Mi
            requests:
              cpu: 250m
              memory: 50Mi
      # dnsPolicy: ClusterFirst
      # restartPolicy: Always
      # schedulerName: default-scheduler
      # securityContext: {}
      # shareProcessNamespace: false
      # terminationGracePeriodSeconds: 30
      # {{ if .Values.spec.karpenterInstanceProfile }}
      # nodeSelector:
      #   team: default
      #   type: karpenter
      # tolerations:
      #   - key: 'karpenter'
      #     operator: 'Exists'
      #     effect: 'NoSchedule'
      # {{ end }}
      # topologySpreadConstraints:
      #   - maxSkew: 1
      #     topologyKey: topology.kubernetes.io/zone
      #     whenUnsatisfiable: DoNotSchedule
      #     labelSelector:
      #       matchLabels:
      #         app.kubernetes.io/name: app-2049
      #     volumeMounts:
      #       - mountPath: /usr/share/nginx/html/index.html
      #         name: nginx-conf
      #         subPath: index.html
      # volumes:
      #   - name: nginx-conf
      #     configMap:
      #       name: nginx-index-html-configmap
      # data:
      #   nginx-index.html-configmap: |
      #     <html><H1>Hello World!</H1></html>
#  immutable: true
---
apiVersion: v1
kind: Service
metadata:
  namespace: team-riker
  name: service-staticnginx
  labels:
    app: staticnginx
    {{- toYaml .Values.labels | nindent 4 }}
spec:
  ports:
    - port: 80
      targetPort: 80
      protocol: TCP
  type: NodePort
  selector:
    app.kubernetes.io/name: app-staticnginx
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  namespace: team-riker
  name: ingress-staticnginx
  labels:
    app: staticnginx
    {{- toYaml .Values.labels | nindent 4 }}
  annotations:
{{ if eq .Values.spec.ingress.type "nginx" }}
    kubernetes.io/ingress.class: "nginx"
{{ else }}
    alb.ingress.kubernetes.io/scheme: internet-facing
    alb.ingress.kubernetes.io/target-type: ip
  {{ if .Values.spec.ingress.host }}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP":80,"HTTPS": 443}]'
    alb.ingress.kubernetes.io/ssl-redirect: '443'
  {{ else }}
    alb.ingress.kubernetes.io/listen-ports: '[{"HTTP": 80}]'
  {{ end }}
    alb.ingress.kubernetes.io/tags: Environment={{ .Values.labels.env }},Team=Riker
{{ end }}
  {{ if .Values.spec.ingress.host }}
    external-dns.alpha.kubernetes.io/set-identifier: {{ .Values.spec.clusterName }}
    external-dns.alpha.kubernetes.io/aws-weight: '{{ .Values.spec.ingress.route53_weight }}'
    external-dns.alpha.kubernetes.io/ttl: "10"
  {{ end }}     
spec:
{{ if eq .Values.spec.ingress.type "nginx" }}
  kubernetes.io/ingress.class: "nginx"
{{ else }}
  ingressClassName: alb
{{ end }}
  rules:
{{ if .Values.spec.ingress.host }}
    - host: staticnginx.{{ .Values.spec.ingress.host }}
{{ else }}
    - host: 
{{ end }}
      http:
        paths:
        - path: /
          pathType: Prefix
          backend:
            service:
              name: service-staticnginx
              port:
                number: 80
